from termcolor import colored
import subprocess
import shutil
import os

reference_path = os.path.join(os.path.dirname(__file__), "references")


def run_test_and_update(testname, output_file, refname=None):
    print(
        colored(
            "-- Running " + testname + " test before updating references. --", "blue"
        )
    )
    result = subprocess.run(["ctest", "--output-on-failure", "-R", testname])
    if result.returncode == 0:
        print(
            colored(
                "-> " + testname + " test passed, no need to update references.",
                "green",
            )
        )
        return
    print(
        colored(
            "PLEASE MAKE SURE THE TEST FAILED IN A WAY THAT IS EXPECTED!"
            " (for example changed channel IDs after adding new analyses)",
            "red",
        )
    )
    print(
        colored(
            "Do you want to update the reference files to the ones generated by this test? (y/n)",
            "blue",
        )
    )
    answer = input()
    if answer.lower() == "y" or answer.lower() == "yes":
        print(colored("-> Updating references", "green"))
        if refname:
            shutil.copyfile(output_file, os.path.join(reference_path, refname))
        else:
            shutil.copyfile(
                output_file,
                os.path.join(reference_path, os.path.basename(output_file) + ".ref"),
            )


print(
    colored(
        "IMPORTANT: Upgrading the references only works if you can run all the tests."
        " Make sure your version is compiled with LEP_CHISQ=ON.",
        "red",
    )
)
run_test_and_update(
    "HiggsBounds_effC",
    "tests/mhmodplus_effC/mhmod+_HiggsBounds_results.dat",
    "mhmod+_HiggsBounds_results.dat.effC.ref",
)
run_test_and_update(
    "HiggsBounds_hadr",
    "tests/mhmodplus_hadr/mhmod+_HiggsBounds_results.dat",
    "mhmod+_HiggsBounds_results.dat.hadr.ref",
)
run_test_and_update("HBeffC", "example_programs/HBeffC-output.dat")
run_test_and_update(
    "HBwithchannelrates", "example_programs/Mh125_HBwithchannelrates.dat"
)
run_test_and_update(
    "HBwithLHClikelihood", "example_programs/Mh125_HBwithLHClikelihood.dat"
)
run_test_and_update("HBwithLEPlikelihood", "example_programs/HBchisq-output.dat")

print(colored("-- Rerunning all test to check if they pass --", "blue"))
subprocess.run(["ctest", "--output-on-failure"])
