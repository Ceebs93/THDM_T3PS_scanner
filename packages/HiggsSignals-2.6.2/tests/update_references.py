from termcolor import colored
import subprocess
import shutil
import os

reference_path = os.path.join(os.path.dirname(__file__), "references")


def run_test_and_update(testname, output_files, refnames=None):
    if isinstance(output_files, str):
        output_files = [output_files]
    if isinstance(refnames, str):
        refnames = [refnames]
    print(
        colored(
            "-- Running " + testname + " test before updating references. --", "blue"
        )
    )
    result = subprocess.run(["ctest", "--output-on-failure", "-R", testname])
    if result.returncode == 0:
        print(
            colored(
                "-> " + testname + " test passed, no need to update references.",
                "green",
            )
        )
        return
    print(colored("PLEASE MAKE SURE THE TEST FAILED IN A WAY THAT IS EXPECTED!", "red"))
    print(
        colored(
            "Do you want to update the reference files to the ones generated by this test? (y/n)",
            "blue",
        )
    )
    answer = input()
    if answer.lower() == "y" or answer.lower() == "yes":
        print(colored("-> Updating references", "green"))
        if refnames:
            for output_file, refname in zip(output_files, refnames):
                shutil.copyfile(output_file, os.path.join(reference_path, refname))
        else:
            for output_file in output_files:
                shutil.copyfile(
                    output_file,
                    os.path.join(
                        reference_path, os.path.basename(output_file) + ".ref"
                    ),
                )


run_test_and_update(
    "HiggsSignals_effC",
    "tests/mhmodplus_effC/mhmod+_HiggsSignals_results.dat",
    "mhmod+_HiggsSignals_results.dat.effC.ref",
)
run_test_and_update(
    "HiggsSignals_hadr",
    "tests/mhmodplus_hadr/mhmod+_HiggsSignals_results.dat",
    "mhmod+_HiggsSignals_results.dat.hadr.ref",
)
run_test_and_update("HS_2Higgses", "example_programs/results/2Higgses_pdf2.dat")
run_test_and_update("HSeffC", "example_programs/results/HSeffC.dat")
run_test_and_update("HShadr", "example_programs/results/HShadr.dat")
run_test_and_update("HSwithSLHA", "tests/SLHA_FHexample.fh-fromHS")
run_test_and_update(
    "HS_mass",
    ["example_programs/results/HS_mass_pdf{}.dat".format(i) for i in (1, 2, 3)],
)
run_test_and_update(
    "HS_SM_LHCRun1",
    [
        "example_programs/results/HS_SM_LHCrun1_mass_pdf{}.dat".format(i)
        for i in (1, 2, 3)
    ],
)
run_test_and_update("HSLimitEffC", "example_programs/results/HSLimitEffC.dat")
print(colored("-- Rerunning all test to check if they pass --", "blue"))
subprocess.run(["ctest", "--output-on-failure"])
